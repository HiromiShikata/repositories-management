name: Sync files

on:
  schedule:
    - cron: '0 0 * * 1'
  push:
    branches:
      - main
    paths:
      - '.github/workflows/repositories-management.yml'

jobs:
  update-repos:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          sudo apt-get update
          sudo apt-get install gh

      - name: Sync Files
        run: |
          echo "${{ secrets.GH_TOKEN }}" | gh auth login --with-token
          gh auth status
          ORG_NAME="HiromiShikata"
          # REPO_LIST=$(gh repo list $ORG_NAME --limit 1000 --json name -q '.[].name')
          REPO_LIST=(
            "template-typescript"
            "hashigoya-private"
          )
          FILES_TO_SYNC=(
            ".github/workflows/assign-all-cards-to-owner.yml"
          )
          for REPO in $REPO_LIST; do
            gh repo clone $ORG_NAME/$REPO
            for FILE in "${FILES_TO_SYNC[@]}"; do
              DIRECTORY=$(dirname $FILE)
              mkdir -p $REPO/$DIRECTORY
              cp $FILE $REPO/$FILE
            done
            cd $REPO
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add .
            git diff --staged --quiet || git commit -m "chore($REPO): synchronize files"
            git push || true
            cd ..
            rm -rf $REPO
          done

  label-sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Install GitHub Label Sync
      run: npm install -g github-label-sync
      
    - name: Sync Labels
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        for repo in $(gh repo list HiromiShikata --limit 100 --json name --jq '.[].name'); do
          github-label-sync --access-token $GITHUB_TOKEN --labels ./labels.yaml HiromiShikata/$repo
        done


  branch_protection:
    runs-on: ubuntu-latest
    steps:
      - name: Apply branch protection
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const orgName = "HiromiShikata"
            const repoList = ["template-typescript", "hashigoya-private",]
            const branch = 'main'
            const protectionRules = {
              required_status_checks: {
                strict: true,
                contexts: ['test', 'build']
              },
              enforce_admins: true,
              required_pull_request_reviews: {
                required_approving_review_count: 1
              },
              restrictions: null
            }

            for (const repo of repoList) {
              github.rest.repos.updateBranchProtection({
                owner: orgName,
                repo,
                branch,
                ...protectionRules
              }).then(() => {
                console.log(`Branch protection applied to ${repo}`);
              }).catch((error) => {
                console.error(`Error applying branch protection to ${repo}: ${error}`);
              });
            }
